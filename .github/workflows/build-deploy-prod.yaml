name: build and deploy production
on:
  push:
    branches:
      - master
env:
  IMAGE_NAME: auservice:latest
  GO_VERSION: 1.20.x
jobs:
  build-test-jobs:
    runs-on: ubuntu-latest
    name: build & test
    strategy:
      matrix:
        go-version: [1.20.x]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache-dependency-path: |
            go.mod
            go.sum

      - name: Install dependencies
        run: go get .

      - name: Build before deploy
        run: go build -v ./...

      - name: Run tests before deploy
        run: go test ./... -json > TestResults-${{ matrix.go-version }}.json

      - name: Upload Go test results
        uses: actions/upload-artifact@v3
        with:
          name: TestResults-${{ matrix.go-version }}
          path: TestResults-${{ matrix.go-version }}.json

  docker-jobs:
    runs-on: ubuntu-latest
    name: build & push docker image
    needs: build-test-jobs
    strategy:
      matrix:
        go-version: [1.20.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache-dependency-path: |
            go.mod
            go.sum

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}

  deploy-jobs:
    runs-on: ubuntu-latest
    name: deploy to production
    needs: docker-jobs
    steps:
      - name: Deploy to production
        run: |
          echo "deploying to production..."
        shell: bash
